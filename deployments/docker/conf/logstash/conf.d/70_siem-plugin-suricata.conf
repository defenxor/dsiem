
###############################################################################
# Dsiem suricata Plugin
# Type: SID
#
# Auto-generated by dpluger on 2018-10-30T19:35:27+07:00
###############################################################################

filter {

# 1st step: identify the source log and clone it to another event with type => siem_events

  if [application] == "suricata" and [alert] {
    clone {
      clones => [ "siem_events" ]
    }

# 2nd step: remove the source log identifier from the clone, so that the clone will not
# go through the same pipeline as the source log. Also remove the temporary type field,
# replacing it with metadata field that will be read by the rest of siem pipeline.

    if [type] == "siem_events" {
      mutate {
        remove_field => [ "[application]" , "type" ]
        add_field => {
          "[@metadata][siem_plugin_type]" => "suricata"
          "[@metadata][siem_data_type]" => "normalizedEvent"
        }
      }
    }
  }
}

# 3rd step: the actual event normalization so that it matches the format that siem expect.
#
# Required fields:
#   timestamp (date), title (string), sensor (string), product (string), dst_ip (string), src_ip (string)
#
# For PluginRule type plugin, the following are also required:
#   plugin_id (integer), plugin_sid (integer)
#
# For TaxonomyRule type plugin, the following is also required:
#   category (string)
#
# Optional fields:
# These fields are optional but should be included whenever possible since they can be used in directive rules:
#   dst_port (integer), src_port (integer), protocol (string), subcategory (string)
#
# These fields are also optional and can be used in directive rules. They should be used for custom data that
# are not defined in standard SIEM fields.
#   custom_label1 (string), custom_data1 (string), custom_label2 (string), custom_data2 (string)
#   custom_label3 (string), custom_data3 (string)
#
# And this field is optional, and should be included if the original logs are also stored in elasticsearch.
# This will allow direct pivoting from alarm view in the web UI to the source index.
#   src_index_pattern (string)
#
# As for other fields from source log, they will be removed by logstash plugin prune below

filter {
  if [@metadata][siem_plugin_type] == "suricata" {
    date {
      match => [ "[timestamp]", "ISO8601" ]
      target => [timestamp]
    }


  #  if ![src_ip] {
  #    mutate {
  #      add_field => {}
  #    }
  #  }
    mutate {
      replace => {
        "title" => "%{[alert][signature]}"
        "src_index_pattern" => "suricata-*"
        "sensor" => "%{[host][name]}"
        "product" => "Intrusion Detection System"
        "src_ip" => "%{[src_ip]}"
        "dst_ip" => "%{[dest_ip]}"
        "protocol" => "%{[proto]}"
        "category" => "%{[alert][category]}"

        "plugin_id" => "1001"
        "plugin_sid" => "%{[alert][signature_id]}"
        "src_port" => "%{[src_port]}"
        "dst_port" => "%{[dest_port]}"

      }
    }

    mutate {
      convert => {
        "plugin_id" => "integer"
        "plugin_sid" => "integer"
        "src_port" => "integer"
        "dst_port" => "integer"
      }
    }

    prune {
      whitelist_names => [ "timestamp", "@metadata", "src_index_pattern", "title", "sensor", "product",
        "src_ip", "dst_ip", "plugin_id", "plugin_sid", "category", "subcategory",
        "src_port", "dst_port", "protocol", "custom_label1", "custom_label2", "custom_label3",
        "custom_data1", "custom_data2", "custom_data3" ]
    }
  }
}
