version: 2
jobs:
  build-cmd:
    docker:
      - image: circleci/golang:1.16.0
        environment:
          GO111MODULE: "on"
          GOFLAGS: "-mod=vendor"
    working_directory: /go/src/github.com/defenxor/dsiem
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-path-v1-{{ checksum "go.sum" }}
      - run:
          name: run build
          command: |
            ./scripts/gobuild-cmd.sh
      - run:
          name: run tests
          command: |
            go vet ./...
            go test -v -cover -race -timeout=60s -coverprofile=./coverage.out $(go list ./...)
            bash <(curl -s https://codecov.io/bash)
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - save_cache:
          key: go-path-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/src"
  build-web:
    docker:
      - image: circleci/node:lts-browsers
    steps:
      - checkout
      - restore_cache:
          keys:
            - node-mod-v1-{{ checksum "web/ui/package.json" }}
      - run:
          name: install deps
          command: |
            cd web/ui
            rm -rf node_modules
            npx npm-force-resolutions
            npm install
      - save_cache:
          key: node-mod-v1-{{ checksum "web/ui/package.json" }}
          paths:
            - "web/ui/node_modules"
      # this will be enabled once the web UI code is ready for it
      - run:
          name: Linting
          command: cd web/ui && npm run lint
      # - run:
      #    name: Testing
      #    command: cd web/ui && npm run test && bash <(curl -s https://codecov.io/bash)
      - run:
          name: build dist
          command: |
            cd web/ui
            npm run ng -- build --prod --build-optimizer --base-href /ui/
            rm -rf ../dist
            cp -r ./dist ../
      - persist_to_workspace:
          root: .
          paths: web/dist/*
  semantic-check:
    docker:
      - image: circleci/node:lts-browsers
    steps:
      - checkout
      - run:
          name: install tools
          command: |
            sudo npm install -g semantic-release@15.12.0 @semantic-release/exec@3.3.0
      - run:
          name: check if release needed
          command: |
            # dry-run, but will trigger @semantic-release/exec to write ./release_ver as needed
            npx semantic-release -b master -d
      - persist_to_workspace:
          root: .
          paths: release_ver
  build-release:
    docker:
      - image: circleci/golang:1.16.0
        environment:
          GO111MODULE: "on"
          GOFLAGS: "-mod=vendor"
    working_directory: /go/src/github.com/defenxor/dsiem
    steps:
      - checkout
      - add_ssh_keys
      - restore_cache:
          keys:
            - go-mod-v1-{{ checksum "go.sum" }}
            - go-path-v1-{{ checksum "go.sum" }}
      - attach_workspace:
          at: .
      - run:
          name: create release
          command: |
            ver=$(cat ./release_ver 2>/dev/null || true)
            if [ "$ver" ]; then
              ./scripts/gobuild-cmd-release.sh $ver
            else
              echo "semantic-check doesnt signal that a build is required"
              mkdir -p temp
            fi
      - save_cache:
          key: go-mod-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/pkg/mod"
      - save_cache:
          key: go-path-v1-{{ checksum "go.sum" }}
          paths:
            - "/go/src"
      - persist_to_workspace:
          root: .
          paths:
            - temp
  release-github:
    docker:
      - image: circleci/node:lts-browsers
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: install tools
          command: |
            sudo npm install -g semantic-release@15.12.0 @semantic-release/exec@3.3.0
      - run:
          name: release to github if needed
          command: |
            touch ./release_tag
            npx semantic-release -b master
      - persist_to_workspace:
          root: .
          paths:
            - release_tag
  release-dockerhub:
    machine: true
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: create docker image
          command: |
            ver=$(cat ./release_ver 2>/dev/null || true)
            tag=$(cat ./release_tag 2>/dev/null || true)
            if [ "$tag" ]; then
              # get downloader for private asset
              wget https://github.com/gruntwork-io/fetch/releases/download/v0.3.2/fetch_linux_amd64 -O /tmp/fetch
              chmod +x /tmp/fetch
              # wait until the release is approved, exit after waiting for >= 30 minutes
              minutewait=30
              # fetch requires this
              export GITHUB_OAUTH_TOKEN=$GITHUB_TOKEN
              while ! /tmp/fetch --repo="https://github.com/defenxor/dsiem" --tag=$tag --release-asset="dsiem-server_linux_amd64.zip" /tmp 2>/dev/null; do
                [ "$minutewait" == "0" ] && echo "Timeout waiting for release asset, skipping docker build." && exit 0
                echo "release $tag doesnt exist yet, sleeping for 60 seconds before retrying .. retry left: $minutewait"
                minutewait=$(( minutewait - 1 ))
                sleep 60
              done
              echo "building docker for release $ver .."
              cd deployments/docker/build
              docker build -f Dockerfile -t defenxor/dsiem:$ver -t defenxor/dsiem:latest . --build-arg tag=$tag --build-arg token=$GITHUB_TOKEN
              echo "$DOCKER_PASSWD" | docker login -u $DOCKER_USER --password-stdin
              docker push defenxor/dsiem:$ver
              docker push defenxor/dsiem:latest
            else
              echo "release_tag is not set."
            fi
workflows:
  version: 2
  build-test-release:
    jobs:
      - build-cmd:
          filters:
            branches:
              only: master
      - build-web:
          filters:
            branches:
              only: master
      - semantic-check:
          requires:
            - build-cmd
            - build-web
      - build-release:
          requires:
            - semantic-check
      - release-github:
          requires:
            - build-release
      - release-dockerhub:
          requires:
            - release-github
  build-test:
    jobs:
      - build-cmd:
          filters:
            branches:
              ignore: master
      - build-web:
          filters:
            branches:
              ignore: master
